What happens when you initialize a repository? Why do you need to do it?

It basically sets up a 'place' a connection to git where you can start putting
in files that you would want to start version controls on

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is the intermediate stage between a working directory and the repository.
Using a flight analogy, the file is the passenger, the working directory is the city of 
departure, the staging area is the city where the passenger has a layover or catches a 
connecting flight, and the respoitory is the final destination. The repository helps
you double-check your work so you don't make unintentional commits

How can you use the staging area to make sure you have one commit per logical
change?

You can do that by first running 'git status' before makeing a commit. That
way you get to see what's in the staging area that you might have forgotten.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

A good example will be when you want to experiment with code that you're not yet 
sure you want to see in the master branch. You can continue making separate changes
to the branch and the master file until such a time when you want to merge the branch
changes into the master. That way, you can track the changes made to the master and
the branch separately via commits.

How do the diagrams help you visualize the branch structure?

It makes it helpful for you to track branches and commits that are traceable so 
desired changes aren't lost.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?